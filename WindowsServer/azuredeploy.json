{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.1",
  "parameters": {
    "storageType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS"
      ],
      "metadata": {
        "description": "Which type of storage you want to use"
      }
    },
    "vmName": {
      "type": "string",
      "defaultValue": "WIN2016VM",
      "metadata": {
        "description": "Local name for the VM can be whatever you want"
      }
    },
    "vmAdminUserName": {
      "type": "string",
      "metadata": {
        "description": "VM admin user name"
      },
      "defaultValue": "bojadmin"
    },
    "vmAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "VM admin password. The supplied password must be between 8-123 characters long and must satisfy at least 3 of password complexity requirements from the following: 1) Contains an uppercase character 2) Contains a lowercase character 3) Contains a numeric digit 4) Contains a special character."
      }
    },
    "vmSize": {
      "type": "string",
      "metadata": {
        "description": "Desired Size of the VM."
      },
      "defaultValue": "Standard_DS2"
    },
    "imageSKU": {
      "type": "string",
      "allowedValues": [
        "2012-R2-Datacenter",
        "2016-Datacenter"
      ],
      "metadata": {
        "description": "Windows server SKU"
      },
      "defaultValue": "2016-Datacenter"
    },
    "dnsLabelPrefix": {
      "type": "string",
      "metadata": {
        "description": "DNS Label for the Public IP. Must be lowercase. It should match with the following regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$ or it will raise an error."
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/BrettOJ/EEAzureAutomation/master/WindowsServer/",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
      }
    },
    "modulesUrl": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/BrettOJ/EEAzureAutomation/master/WindowsServer/UpdateLCMforAAPull.zip",
      "metadata": {
        "description": "URL for the DSC configuration package. NOTE: Can be a Github url(raw) to the zip file (this is the default value)"
      }
    },
    "configurationFunction": {
      "type": "string",
      "defaultValue": "UpdateLCMforAAPull.ps1\\ConfigureLCMforAAPull",
      "metadata": {
        "description": "DSC configuration function to call. Should contain filename and function in format fileName.ps1\\configurationfunction"
      }
    },
    "nodeConfigurationName": {
      "type": "string",
      "defaultValue": "EEInstalliiS.localhost",
      "metadata": {
        "description": "The name of the node configuration, on the Azure Automation DSC pull server, that this node will be configured as"
      }
    },
    "configurationMode": {
      "type": "string",
      "defaultValue": "ApplyAndMonitor",
      "allowedValues": [
        "ApplyOnly",
        "ApplyAndMonitor",
        "ApplyAndAutoCorrect"
      ],
      "metadata": {
        "description": "DSC agent (LCM) configuration mode setting. ApplyOnly, ApplyAndMonitor, or ApplyAndAutoCorrect"
      }
    },
    "configurationModeFrequencyMins": {
      "type": "int",
      "defaultValue": 15,
      "metadata": {
        "description": "DSC agent (LCM) configuration mode frequency setting, in minutes"
      }
    },
    "refreshFrequencyMins": {
      "type": "int",
      "defaultValue": 30,
      "metadata": {
        "description": "DSC agent (LCM) refresh frequency setting, in minutes"
      }
    },
    "rebootNodeIfNeeded": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "DSC agent (LCM) rebootNodeIfNeeded setting"
      }
    },
    "actionAfterReboot": {
      "type": "string",
      "defaultValue": "ContinueConfiguration",
      "allowedValues": [
        "ContinueConfiguration",
        "StopConfiguration"
      ],
      "metadata": {
        "description": "DSC agent (LCM) actionAfterReboot setting. ContinueConfiguration or StopConfiguration"
      }
    },
    "allowModuleOverwrite": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "DSC agent (LCM) allowModuleOverwrite setting"
      }
    },
    "timestamp": {
      "type": "string",
      "metadata": {
        "description": "The current datetime, as a string, to force the request to go through ARM even if all fields are the same as last ARM deployment of this template; example in parameters file is in MM/dd/yyyy H:mm:ss tt format"
      }
    }
  },
  "variables": {
    "storageName": "[concat(uniquestring(resourceGroup().id), 'standardsa')]",
    "vnet01Prefix": "10.0.0.0/16",
    "vnet01Subnet1Name": "Subnet-1",
    "vnet01Subnet1Prefix": "10.0.0.0/24",
    "vmImagePublisher": "MicrosoftWindowsServer",
    "vmImageOffer": "WindowsServer",
    "vmOSDiskName": "VMOSDisk",
    "vmVnetID": "[resourceId('Microsoft.Network/virtualNetworks', 'Vnet01')]",
    "vmSubnetRef": "[concat(variables('VMVnetID'), '/subnets/', variables('Vnet01Subnet1Name'))]",
    "vmStorageAccountContainerName": "vhds",
    "vmNicName": "[concat(parameters('VMName'), 'NetworkInterface')]",
    "vmIP01Name": "VMIP01",
    "certificateUrl": "https://bojvault.vault.azure.net:443/secrets/bojSecret/a0c56c72d7de44608d2501f96a5d8346",
    "vaultResourceGroup": "BOJ-TESTVM-rg",
    "vaultName": "bojVault"
  },
  "resources": [
    {
      "name": "[variables('storageName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [],
      "tags": {
        "displayName": "Storage01"
      },
      "properties": {
        "accountType": "[parameters('storageType')]"
      }
    },
    {
      "name": "VNet01",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [],
      "tags": {
        "displayName": "VNet01"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnet01Prefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('vnet01Subnet1Name')]",
            "properties": {
              "addressPrefix": "[variables('vnet01Subnet1Prefix')]"
            }
          }
        ]
      }
    },
    {
      "name": "[variables('vmNicName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', 'Vnet01')]",
        "[concat('Microsoft.Network/publicIPAddresses/', variables('vmIP01Name'))]"
      ],
      "tags": {
        "displayName": "VMNic01"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('vmSubnetRef')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('vmIP01Name'))]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[variables('vmIP01Name')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [],
      "tags": {
        "displayName": "VMIP01"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[parameters('dnsLabelPrefix')]"
        }
      }
    },
    {
      "name": "[parameters('vmName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-04-30-preview",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('vmNicName'))]"
      ],
      "tags": {
        "displayName": "VM01"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('vmName')]",
          "adminUsername": "[parameters('vmAdminUsername')]",
          "adminPassword": "[parameters('vmAdminPassword')]",
          "secrets": [
            {
              "sourceVault": {
                "id": "[resourceId(variables('vaultResourceGroup'), 'Microsoft.KeyVault/vaults', variables('vaultName'))]"
              },
              "vaultCertificates": [
                {
                  "certificateUrl": "[Variables('certificateUrl')]",
                  "certificateStore": "My"
                }
              ]
            }
          ],
          "windowsConfiguration": {
            "provisionVMAgent": true,
            "winRM": {
              "listeners": [
                {
                  "protocol": "Https",
                  "certificateUrl": "[variables('certificateUrl')]"
                }
              ]
            },
            "enableAutomaticUpdates": true
          }
        },
            "storageProfile": {
              "imageReference": {
                "publisher": "[variables('vmImagePublisher')]",
                "offer": "[variables('vmImageOffer')]",
                "sku": "[parameters('imageSKU')]",
                "version": "latest"
              },
              "osDisk": {
                "name": "VMOSDisk",
                "vhd": {
                  "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), '2015-06-15').primaryEndpoints.blob, variables('vmStorageAccountContainerName'), '/', variables('vmOSDiskName'), '.vhd')]"
                },
                "caching": "ReadWrite",
                "createOption": "FromImage"
              }
            },
            "networkProfile": {
              "networkInterfaces": [
                {
                  "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('vmNicName'))]"
                }
              ]
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "name": "[concat(parameters('vmName'),'/Microsoft.Powershell.DSC')]",
              "apiVersion": "2016-04-30-preview",
              "location": "[resourceGroup().location]",
              "tags": {
                "AutomationAccountARMID": "subscriptions/e81fd02b-f607-406c-83d2-670ce0497fee/resourceGroups/EEAutomationRG/providers/Microsoft.Automation/automationAccounts/EEAutomation"
              },
              "properties": {
                "publisher": "Microsoft.Powershell",
                "type": "DSC",
                "typeHandlerVersion": "2.22",
                "autoUpgradeMinorVersion": false,
                "settings": {
                  "ModulesUrl": "[parameters('modulesUrl')]",
                  "ConfigurationFunction": "[parameters('configurationFunction')]",
                  "Properties": [
                    {
                      "Name": "RegistrationKey",
                      "Value": "m+oIgtyj7iWTqVsLJNwYB/XbxZmrcKEy7HachwojsGLr3itiOstlRdgpr7/ZbqJC9pjFd5alS3Zl2QRJNNbUPg==",
                      "TypeName": "System.String"
                    },
                    {
                      "Name": "RegistrationUrl",
                      "Value": "https://ase-agentservice-prod-1.azure-automation.net/accounts/a2df28ae-1e78-4688-8bd4-3b295718117f",
                      "TypeName": "System.String"
                    },
                    {
                      "Name": "NodeConfigurationName",
                      "Value": "EEInstalliiS.localhost",
                      "TypeName": "System.String"
                    },
                    {
                      "Name": "ConfigurationMode",
                      "Value": "applyAndMonitor",
                      "TypeName": "System.String"
                    },
                    {
                      "Name": "ConfigurationModeFrequencyMins",
                      "Value": "15",
                      "TypeName": "System.Int32"
                    },
                    {
                      "Name": "RefreshFrequencyMins",
                      "Value": "30",
                      "TypeName": "System.Int32"
                    },
                    {
                      "Name": "RebootNodeIfNeeded",
                      "Value": false,
                      "TypeName": "System.Boolean"
                    },
                    {
                      "Name": "ActionAfterReboot",
                      "Value": "continueConfiguration",
                      "TypeName": "System.String"
                    },
                    {
                      "Name": "AllowModuleOverwrite",
                      "Value": false,
                      "TypeName": "System.Boolean"
                    }
                  ]
                },
                "protectedSettings": {}
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            }
          ]
        }
  ]
 }
 
